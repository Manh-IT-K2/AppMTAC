import 'dart:typed_data';
import 'dart:ui';
import 'package:geolocator/geolocator.dart';
import 'package:get/get.dart';
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:hugeicons/hugeicons.dart';

class MapController extends GetxController {
  /* Bottom bar Destination */
  var sheetHeight = 0.07.obs;

  void updateHeight(double delta, double screenHeight) {
    sheetHeight.value -= delta / screenHeight;
    sheetHeight.value = sheetHeight.value.clamp(0.07, 0.7);
  }

  /* Google Map */
  GoogleMapController? mapController;
  Rx<LatLng?> currentLocation = Rx<LatLng?>(null);

  // To·∫° ƒë·ªô ƒëi·ªÉm b·∫Øt ƒë·∫ßu & k·∫øt th√∫c
  final LatLng startLocation = const LatLng(10.7769, 106.7009); // B·∫øn Th√†nh
  final LatLng endLocation = const LatLng(10.8039, 106.7143); // B√¨nh Th·∫°nh

// Danh s√°ch c√°c ƒëi·ªÉm c·ªßa tuy·∫øn ƒë∆∞·ªùng
  final List<LatLng> routePoints = const [
    LatLng(10.7769, 106.7009), // B·∫øn Th√†nh
    LatLng(10.7845, 106.7070), // Nguy·ªÖn Th·ªã Minh Khai
    LatLng(10.7932, 106.7112), // ƒêi·ªán Bi√™n Ph·ªß
    LatLng(10.8039, 106.7143), // B√¨nh Th·∫°nh
  ];

  // Danh s√°ch Marker
  RxSet<Marker> markers = <Marker>{}.obs;

  // Danh s√°ch tuy·∫øn ƒë∆∞·ªùng (Polyline)
  RxSet<Polyline> polylines = <Polyline>{}.obs;

  @override
  void onInit() {
    super.onInit();
    _loadMapData();
    getCurrentLocation();
  }

  void _loadMapData() async {
    final markerIcon1 = await createCustomMarker(
      icon: HugeIcons.strokeRoundedPackage03,
      backgroundColor: Colors.blue,
      borderColor: Colors.white,
    );

    final markerIcon2 = await createCustomMarker(
      icon: Icons.location_on_outlined,
      backgroundColor: const Color(0xFFF9C805),
      borderColor: Colors.white,
    );

    // Th√™m Marker
    markers.addAll({
      Marker(
        markerId: const MarkerId("start"),
        position: startLocation,
        icon: markerIcon2,
      ),
      Marker(
        markerId: const MarkerId("end"),
        position: endLocation,
        icon: markerIcon1,
      ),
      for (int i = 1; i < routePoints.length - 1; i++)
        Marker(
          markerId: MarkerId("point$i"),
          position: routePoints[i],
          icon: markerIcon2,
        ),
    });

    // Th√™m tuy·∫øn ƒë∆∞·ªùng (Polyline)
    polylines.add(
      Polyline(
        polylineId: const PolylineId("route"),
        color: Colors.green,
        width: 5,
        points: routePoints,
      ),
    );
  }

  void setMapController(GoogleMapController controller) {
    mapController = controller;
    update();
  }

  Future<void> getCurrentLocation() async {
    bool serviceEnabled;
    LocationPermission permission;

    // Ki·ªÉm tra d·ªãch v·ª• v·ªã tr√≠
    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      return;
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        return;
      }
    }

    if (permission == LocationPermission.deniedForever) {
      return;
    }

    // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
    Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high);
    currentLocation.value = LatLng(position.latitude, position.longitude);
final customIcon = await createCurrentLocationMarker();
    // Th√™m Marker v·ªã tr√≠ hi·ªán t·∫°i
    markers.add(
      Marker(
        markerId: const MarkerId("currentLocation"),
        position: currentLocation.value!,
        icon: customIcon,
      ),
    );

    // C·∫≠p nh·∫≠t Camera ƒë·∫øn v·ªã tr√≠ hi·ªán t·∫°i
    if (mapController != null) {
      mapController!.animateCamera(
        CameraUpdate.newLatLngZoom(currentLocation.value!, 15),
      );
    }
  }

  // Draw Icon Map
  Future<BitmapDescriptor> createCustomMarker({
    required IconData icon,
    Color backgroundColor = Colors.amber,
    Color borderColor = Colors.white,
  }) async {
    const double size = 125; // K√≠ch th∆∞·ªõc t·ªïng c·ªßa marker
    final PictureRecorder pictureRecorder = PictureRecorder();
    final Canvas canvas = Canvas(pictureRecorder);

    // üé® **T·∫°o m√†u v·∫Ω**
    final Paint paintBorder = Paint()..color = borderColor; // Vi·ªÅn
    final Paint paintCircle = Paint()..color = backgroundColor; // N·ªÅn
    final Paint paintLine = Paint()
      ..color = Colors.black
      ..strokeWidth = 6.0
      ..strokeCap = StrokeCap.round;

    final Paint paintDot = Paint()..color = Colors.black; // Ch·∫•m tr√≤n ƒëen

    final double circleRadius = size / 3; // B√°n k√≠nh h√¨nh tr√≤n

    // üìå **1. V·∫Ω ƒë∆∞·ªùng k·∫ª ƒëen d√†i h∆°n**
    final double lineStartY = size - 10;
    final double lineEndY = size - 100;
    canvas.drawLine(
      Offset(size / 2, lineStartY),
      Offset(size / 2, lineEndY),
      paintLine,
    );

    // üìå **2. D·ªãch ch·∫•m tr√≤n ƒëen xu·ªëng d∆∞·ªõi**
    final double dotRadius = 6;
    canvas.drawCircle(
      Offset(size / 2, lineStartY + 5),
      dotRadius,
      paintDot,
    );

    // üìå **3. V·∫Ω vi·ªÅn tr·∫Øng**
    canvas.drawCircle(
      const Offset(size / 2, size - 80),
      circleRadius + 5,
      paintBorder,
    );

    // üìå **4. V·∫Ω n·ªÅn m√†u v√†ng (c√≥ th·ªÉ thay ƒë·ªïi)**
    canvas.drawCircle(
      const Offset(size / 2, size - 80),
      circleRadius,
      paintCircle,
    );

    // üìå **5. V·∫Ω icon v·ªã tr√≠ m√†u tr·∫Øng**
    final TextPainter textPainter = TextPainter(
      textAlign: TextAlign.center,
      textDirection: TextDirection.ltr,
    )..text = TextSpan(
        text: String.fromCharCode(icon.codePoint),
        style: TextStyle(
          fontSize: circleRadius * 1.2,
          fontFamily: icon.fontFamily,
          package: icon.fontPackage,
          color: Colors.white,
        ),
      );

    textPainter.layout();
    textPainter.paint(
        canvas,
        Offset(size / 2 - textPainter.width / 2,
            size - 80 - textPainter.height / 2));

    // üñº **Chuy·ªÉn h√¨nh th√†nh BitmapDescriptor ƒë·ªÉ d√πng trong Google Maps**
    final img = await pictureRecorder
        .endRecording()
        .toImage(size.toInt(), size.toInt());
    final ByteData? byteData =
        await img.toByteData(format: ImageByteFormat.png);
    final Uint8List uint8List = byteData!.buffer.asUint8List();

    return BitmapDescriptor.fromBytes(uint8List);
  }

  Future<BitmapDescriptor> createCurrentLocationMarker() async {
  const double size = 120; // K√≠ch th∆∞·ªõc t·ªïng c·ªßa marker
  final PictureRecorder pictureRecorder = PictureRecorder();
  final Canvas canvas = Canvas(pictureRecorder);

  // üé® **T·∫°o m√†u v·∫Ω**
  final Paint paintBorder = Paint()..color = Colors.purple.shade100; // Vi·ªÅn xanh m·ªù
  final Paint paintCircle = Paint()..color = Colors.purple.shade700; // N·ªÅn xanh ƒë·∫≠m
  final Paint paintInnerCircle = Paint()..color = Colors.white; // V√≤ng tr√≤n trong
  final Paint paintArrow = Paint()..color = Colors.purple.shade900; // M≈©i t√™n

  final double outerCircleRadius = size / 2; // B√°n k√≠nh h√¨nh tr√≤n l·ªõn
  final double innerCircleRadius = outerCircleRadius * 0.8; // H√¨nh tr√≤n nh·ªè

  // üìå **1. V·∫Ω vi·ªÅn xanh m·ªù**
  canvas.drawCircle(
    Offset(outerCircleRadius, outerCircleRadius),
    outerCircleRadius,
    paintBorder,
  );

  // üìå **2. V·∫Ω n·ªÅn xanh ƒë·∫≠m**
  canvas.drawCircle(
    Offset(outerCircleRadius, outerCircleRadius),
    innerCircleRadius,
    paintCircle,
  );

  // üìå **3. V·∫Ω v√≤ng tr√≤n tr·∫Øng b√™n trong**
  canvas.drawCircle(
    Offset(outerCircleRadius, outerCircleRadius),
    innerCircleRadius * 0.8,
    paintInnerCircle,
  );

  // üìå **4. V·∫Ω m≈©i t√™n ƒë·ªãnh h∆∞·ªõng**
 Path arrowPath = Path()
  ..moveTo(outerCircleRadius, outerCircleRadius - 30) // ƒê·ªânh m≈©i t√™n xa h∆°n
  ..lineTo(outerCircleRadius - 20, outerCircleRadius + 15) // C√°nh m≈©i t√™n r·ªông h∆°n
  ..lineTo(outerCircleRadius, outerCircleRadius) // G·ªëc m≈©i t√™n th·∫•p h∆°n
  ..lineTo(outerCircleRadius + 20, outerCircleRadius + 15) // C√°nh c√≤n l·∫°i r·ªông h∆°n
  ..close();


  canvas.drawPath(arrowPath, paintArrow);

  // üñº **Chuy·ªÉn h√¨nh th√†nh BitmapDescriptor**
  final img = await pictureRecorder.endRecording().toImage(size.toInt(), size.toInt());
  final ByteData? byteData = await img.toByteData(format: ImageByteFormat.png);
  final Uint8List uint8List = byteData!.buffer.asUint8List();

  return BitmapDescriptor.fromBytes(uint8List);
}

}
